/* @flow */

declare module 'reactive-charts' {
  declare type ICartesianData = [string, number];

  declare interface IFunctor<T> {
    map<U>(f: (t: T) => U): IFunctor<U>;
  }

  declare interface IComponent {
    label: string | (datum: any) => string;
    tooltip: [string] | (datum: any) => string;
  }

  declare interface ICartesianComponent {
    x: ICartesianData | (datum: any) => string | number;
    y: ICartesianData | (datum: any) => string | number;
  }

  declare interface IBarComponent extends IComponent, ICartesianComponent {
    type: 'bar'
  }

  declare interface ILineComponent extends IComponent {
    type: 'line'
  }

  declare interface ILayout {
    barmode?: 'stack' | 'group';
    xAxis?: any;
    yAxis?: any;
    showLegend?: boolean;
  }

  declare interface IDataOptions {
    url: string,
    interval: number
  }

  // could be ws url, Promise or options
  declare type IData = string | Promise<any> | IDataOptions;

  // TODO: placeholder declaration - specific types should be provided here
  declare function chart(
    components: IComponent[],
    layout: ILayout,
    dataOrOptions?: IData
  ): IFunctor<any>;
  // A `render` function should return a function that'll take chart function as an
  // argument and perform all necessary IO.
  declare function render(selector: string): (IFunctor<any>) => void;

  declare module.exports: {
    chart: chart,
    render: render
  }
}
